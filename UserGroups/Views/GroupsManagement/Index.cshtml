@model IEnumerable<UserGroups.Models.Group>
@inject UserGroups.Repositories.IGroupMemberRepository groupMemberRepository

@{
    ViewData["Title"] = "Groups";
    var userId = User.Claims.Single(c => c.Type == "sub");
    var isAdmin = User.HasClaim("user_type", "administrator");
    var groupMemeber = await groupMemberRepository.GetByUserIdAsync(userId.Value);
}

<h2>@ViewData["Title"]</h2>

@if (isAdmin)
{
    <p>
        <a class="btn btn-success" asp-action="Create">Create New</a>
    </p>
}
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th></th>
            <th></th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td >
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @if (groupMemeber == null)
                    {
                        <a class="btn btn-success" asp-action="Join" asp-route-id="@item.Id">Join</a>
                    }
                    else if (groupMemeber.GroupId == item.Id)
                    {
                        <a class="btn btn-danger" asp-action="Leave" asp-route-id="@item.Id">Leave</a>
                    }
                </td>
                @if (isAdmin)
                {
                    <td><a class="btn btn-warning" asp-action="Edit" asp-route-id="@item.Id"><span class="glyphicon glyphicon-pencil" aria-hidden="true"></span></a></td>
                    <td><a class="btn btn-danger" asp-action="Delete" asp-route-id="@item.Id"><span class="glyphicon glyphicon-trash" aria-hidden="true"></span></a></td>
                }
            </tr>
        }
    </tbody>
</table>
